// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ProyectVDEradio.Utils;
//
//    var currencyApi = CurrencyApi.FromJson(jsonString);

namespace ProyectVDEradio.Utils
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CurrencyApi
    {
        [JsonProperty("success", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        [JsonProperty("terms", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Terms { get; set; }

        [JsonProperty("privacy", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Privacy { get; set; }

        [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? Timestamp { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }

        [JsonProperty("quotes", NullValueHandling = NullValueHandling.Ignore)]
        public Quotes Quotes { get; set; }
    }

    public partial class Quotes
    {
        [JsonProperty("UYUBRL", NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Uyubrl { get; set; }

        [JsonProperty("UYUUSD", NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Uyuusd { get; set; }

        [JsonProperty("UYUARS", NullValueHandling = NullValueHandling.Ignore)]
        public decimal? Uyuars { get; set; }
    }

    public partial class CurrencyApi
    {
        public static CurrencyApi FromJson(string json) => JsonConvert.DeserializeObject<CurrencyApi>(json, ProyectVDEradio.Utils.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CurrencyApi self) => JsonConvert.SerializeObject(self, ProyectVDEradio.Utils.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
