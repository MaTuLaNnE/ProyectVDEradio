@model ProyectVDEradio.ViewModels.RadioProgramsViewModel
@{
    ViewBag.Title = "Programas de Radio";

    var currentTime = DateTime.Now.TimeOfDay;
    var currentDay = (int)DateTime.Now.DayOfWeek;

    var now = DateTime.Now;
    var today = now.Date;

    var startTime = Model.RadioActual.StartTime;
    var startDateTime = today + startTime;

    var elapsed = now - startDateTime;
}

@if (Model.RadioActual == null)
{
    Model.RadioActual = Model.ListaRadios
        .Where(lr =>
            lr.StartTime <= currentTime &&
            lr.EndTime >= currentTime &&
            lr.ProgramDays.Any(pd => pd.WeekDay == currentDay)
        ).FirstOrDefault();
}

<!-- PROGRAMA ACTUAL -->
@if (Model.RadioActual != null)
{
    <div class="radio-main-container">
        <!-- INFORMACIÓN DE LA RADIO -->
        <div class="radio-info-section">
            <div class="program-header">
                <h1>📻 Radio en Vivo</h1>
            </div>

            <div class="program-image-container">
                <img src="~/Content/Images/@Model.RadioActual.Image" alt="Imagen del programa">
            </div>

            <div class="program-main-info">
                <h2 class="program-title">@Model.RadioActual.ProgramName</h2>
                <p class="program-description">@Model.RadioActual.Description</p>

                <div class="program-meta">
                    <div class="meta-item">
                        <strong>🕒 Horario:</strong>
                        @($"{Model.RadioActual.StartTime:hh\\:mm} - {Model.RadioActual.EndTime:hh\\:mm}")
                    </div>
                    <div class="meta-item">
                        <strong>📅 Días de emisión:</strong>
                        @string.Join(" - ", Model.RadioActual.ProgramDays
                            .OrderBy(d => d.WeekDay)
                            .Select(d => System.Globalization.CultureInfo
                                .CurrentCulture
                                .DateTimeFormat
                                .GetDayName((DayOfWeek)d.WeekDay)))
                    </div>
                </div>
            </div>
        </div>

        <!-- COMENTARIOS SIDEBAR -->
        <div class="comments-sidebar">
            <h2>💬 Comentarios de Oyentes</h2>

            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success">
                    <span class="alert-icon">✅</span>
                    @TempData["Success"]
                </div>
            }

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-error">
                    <span class="alert-icon">❌</span>
                    @TempData["Error"]
                </div>
            }

            <div class="comments-section">
                @if (Model.RadioActual.CustomersComments != null && Model.RadioActual.CustomersComments.Any())
                {
                    <div class="comments-list">
                        @foreach (var comment in Model.RadioActual.CustomersComments.OrderByDescending(c => c.CommentDate).Take(5))
                        {
                            <div class="comment-item">
                                <div class="comment-header">
                                    <strong class="comment-author">@comment.Customers.CustomerName</strong>
                                    <span class="comment-date">@comment.CommentDate.ToString("dd/MM/yyyy HH:mm")</span>
                                </div>
                                <p class="comment-text">@comment.Comment</p>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="comment-item">
                        <p class="comment-text" style="text-align: center; font-style: italic; color: #666;">
                            🎙️ ¡Sé el primero en comentar sobre este programa!
                        </p>
                    </div>
                }
            </div>
        </div>


        <!-- REPRODUCTOR DE RADIO -->
    <div class="radio-player-section">
        <h2>🎵 Reproductor en Vivo</h2>

        <div class="radio-player">
            <div class="radio-header">
                <div class="radio-station">Radio Estación FM</div>
                <div class="radio-time">
                    @string.Format("{0:D2}:{1:D2}:{2:D2}", (int)elapsed.TotalHours, elapsed.Minutes, elapsed.Seconds)
                </div>
                <div class="radio-program" id="radioProgram">@Model.RadioActual.ProgramName</div>
            </div>

            <div class="radio-visualizer">
                <div id="visualizerBars"></div>
            </div>

            <div class="radio-status" id="radioStatus" style="display: none; color: red; align-self: center">● EN VIVO</div>
            <div class="radio-message" id="radioMessage" style="color: green; align-self: center">Presiona ▶ para sintonizar</div>


            <div class="radio-controls">
                <button class="radio-play-btn" id="playBtn" onclick="toggleRadio()">▶</button>
                <button class="radio-stop-btn" id="stopBtn" onclick="stopRadio()">⏹</button>

                <div class="radio-volume">
                    <div class="volume-label" id="volumeLabel">Volumen: 50%</div>
                    <input type="range" class="volume-slider" id="volumeSlider"
                           min="0" max="100" value="50" onchange="updateVolume(this.value)">
                </div>
            </div>
        </div>
    </div>
    </div>
}


<!-- CONDUCTORES -->
@if (Model.RadioActual != null)
{
    <section class="section">
        <h2>🎙️ Conductores</h2>
        <div class="hosts-grid">
            @foreach (var ph in Model.Conductores)
            {
                <div class="host-card">
                    <img src="@Url.Content("~/Content/HostImages/" + ph.HostImage)" alt="@ph.HostImage" class="host-img">
                    <div class="host-info">
                        <h3>@ph.HostName</h3>
                        <p>@ph.HostDescription</p>
                    </div>
                </div>
            }
        </div>
    </section>
}


<!-- ESTADÍSTICAS -->
@if (Model.RadioActual != null)
{
    <section class="section">
        <h2>📊 Sobre el Programa</h2>
        <div class="program-stats">
            <div class="stat-item">
                <div class="stat-number">@Model.RadioActual.CustomersComments.Count()</div>
                <div class="stat-label">Comentarios</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">@Model.RadioActual.ProgramHosts.Count()</div>
                <div class="stat-label">Conductores</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">@Model.RadioActual.ProgramDays.Count()</div>
                <div class="stat-label">Días por semana</div>
            </div>
        </div>
    </section>
}


<!-- OTROS PROGRAMAS -->
<section class="section otros-programas">
    <h2>📋 Programación del Día</h2>
    <div class="schedule-grid" id="scheduleGrid">
        @if (Model.ListaRadios != null && Model.ListaRadios.Any())
        {
            foreach (var radio in Model.ListaRadios.OrderBy(r => r.StartTime))
            {

                <div class="schedule-item" id="schedule-@radio.ProgramId" data-start-time="@radio.StartTime.ToString("hh\\:mm")" data-end-time="@radio.EndTime.ToString("hh\\:mm")">
                    <div class="program-image-container-small">
                        <img src="~/Content/Images/@radio.Image" alt="@radio.ProgramName" class="schedule-program-image">
                    </div>
                    <div class="schedule-content">
                        <div class="schedule-time">@($"{radio.StartTime:hh\\:mm} - {radio.EndTime:hh\\:mm}")</div>
                        <div class="schedule-program-name">@radio.ProgramName</div>
                        <div class="schedule-program-desc">@radio.Description</div>
                        <div class="schedule-days">
                            @string.Join(" - ", radio.ProgramDays
                                .OrderBy(d => d.WeekDay)
                                .Select(d => System.Globalization.CultureInfo
                                    .CurrentCulture
                                    .DateTimeFormat
                                    .GetAbbreviatedDayName((DayOfWeek)d.WeekDay)))
                        </div>
                    </div>
                </div>

            }
        }
    </div>
</section>

@section scripts {
    <script>
let isPlaying = false, animationInterval;

const radioSchedule = [
@foreach (var radio in Model.ListaRadios.OrderBy(r => r.StartTime)) {
<text>{
    programId: @radio.ProgramId,
    programName: "@Html.Raw(radio.ProgramName.Replace("\"", "\\\""))",
    description: "@Html.Raw(radio.Description.Replace("\"", "\\\""))",
    startHour: @radio.StartTime.Hours,
    startMinute: @radio.StartTime.Minutes,
    endHour: @radio.EndTime.Hours,
    endMinute: @radio.EndTime.Minutes,
    image: "@radio.Image",
    days: [@string.Join(",", radio.ProgramDays.Select(d => d.WeekDay))]
},</text>
}
];

function $(id) { return document.getElementById(id); }

function createVisualizer() {
    const c = $('visualizerBars');
    if (!c) return;
    c.innerHTML = '';
    for (let i = 0; i < 20; i++) {
        let bar = document.createElement('div');
        bar.className = 'visualizer-bar inactive';
        bar.style.height = '8px';
        c.appendChild(bar);
    }
}

function getCurrentProgram() {
    const now = new Date(), mins = now.getHours() * 60 + now.getMinutes(), day = now.getDay();
    for (let p of radioSchedule) {
        let start = p.startHour * 60 + p.startMinute;
        let end = p.endHour * 60 + p.endMinute;
        if (end <= start) end += 1440;
        if (p.days.includes(day) && (mins >= start || (end > 1440 && mins < end - 1440)))
            return p;
    }
    return radioSchedule[0] || null;
}

function updateTime() {
    const now = new Date();
    const p = getCurrentProgram();
    if (!p) return $('radioTime').textContent = "00:00:00";

    let start = new Date(now);
    start.setHours(p.startHour, p.startMinute, 0, 0);

    const totalNow = now.getHours() * 60 + now.getMinutes();
    const totalStart = p.startHour * 60 + p.startMinute;
    const totalEnd = p.endHour * 60 + p.endMinute;
    if (totalEnd <= totalStart && totalNow < totalStart) start.setDate(start.getDate() - 1);

    let diff = now - start;
    if (diff < 0) return $('radioTime').textContent = "00:00:00";

    let h = Math.floor(diff / 3600000),
        m = Math.floor((diff % 3600000) / 60000),
        s = Math.floor((diff % 60000) / 1000);

    $('radioTime').textContent = [h, m, s].map(x => String(x).padStart(2, '0')).join(':');
    updateCurrentProgram(p);
}

function updateCurrentProgram(p) {
    if (!p) return;
    $('radioProgram').textContent = `${isPlaying ? '🔊' : '🎵'} ${p.programName}${isPlaying ? ' - EN VIVO' : ''}`;
    document.querySelectorAll('.schedule-item').forEach(i => i.classList.remove('active'));
    let active = $(`schedule-${p.programId}`);
    if (active) active.classList.add('active');
}

function animateVisualizer() {
    document.querySelectorAll('.visualizer-bar').forEach(bar => {
        bar.style.height = isPlaying ? `${Math.random() * 50 + 8}px` : '8px';
        bar.classList.toggle('inactive', !isPlaying);
    });
}

function toggleRadio() {
    isPlaying = !isPlaying;
    $('playBtn').textContent = isPlaying ? '⏸' : '▶';
    $('radioStatus').style.display = isPlaying ? 'block' : 'none';
    $('radioMessage').style.display = isPlaying ? 'none' : 'block';
    $('radioMessage').textContent = isPlaying ? '' : 'PAUSADO';
    clearInterval(animationInterval);
    if (isPlaying) animationInterval = setInterval(animateVisualizer, 200);
    animateVisualizer();
    updateCurrentProgram(getCurrentProgram());
}

function stopRadio() {
    isPlaying = false;
    $('playBtn').textContent = '▶';
    $('radioStatus').style.display = 'none';
    $('radioMessage').style.display = 'block';
    $('radioMessage').textContent = 'Presiona ▶ para sintonizar';
    clearInterval(animationInterval);
    animateVisualizer();
    updateCurrentProgram(getCurrentProgram());
}

function updateVolume(v) {
    $('volumeLabel').textContent = `Volumen: ${v}%`;
}

document.addEventListener('DOMContentLoaded', () => {
    createVisualizer();
    updateTime();
    setInterval(updateTime, 1000);
});
    </script>
}
